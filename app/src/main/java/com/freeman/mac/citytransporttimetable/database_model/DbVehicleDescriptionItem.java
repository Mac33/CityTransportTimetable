package com.freeman.mac.citytransporttimetable.database_model;

import com.freeman.mac.citytransporttimetable.database_model.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "DB_VEHICLE_DESCRIPTION_ITEM".
 */
public class DbVehicleDescriptionItem {

    private Long id;
    private String Text;
    private String Sign;
    private Long IdTrafficData;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient DbVehicleDescriptionItemDao myDao;

    private DbTrafficData dbTrafficData;
    private Long dbTrafficData__resolvedKey;


    public DbVehicleDescriptionItem() {
    }

    public DbVehicleDescriptionItem(Long id) {
        this.id = id;
    }

    public DbVehicleDescriptionItem(Long id, String Text, String Sign, Long IdTrafficData) {
        this.id = id;
        this.Text = Text;
        this.Sign = Sign;
        this.IdTrafficData = IdTrafficData;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getDbVehicleDescriptionItemDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getText() {
        return Text;
    }

    public void setText(String Text) {
        this.Text = Text;
    }

    public String getSign() {
        return Sign;
    }

    public void setSign(String Sign) {
        this.Sign = Sign;
    }

    public Long getIdTrafficData() {
        return IdTrafficData;
    }

    public void setIdTrafficData(Long IdTrafficData) {
        this.IdTrafficData = IdTrafficData;
    }

    /** To-one relationship, resolved on first access. */
    public DbTrafficData getDbTrafficData() {
        Long __key = this.IdTrafficData;
        if (dbTrafficData__resolvedKey == null || !dbTrafficData__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DbTrafficDataDao targetDao = daoSession.getDbTrafficDataDao();
            DbTrafficData dbTrafficDataNew = targetDao.load(__key);
            synchronized (this) {
                dbTrafficData = dbTrafficDataNew;
            	dbTrafficData__resolvedKey = __key;
            }
        }
        return dbTrafficData;
    }

    public void setDbTrafficData(DbTrafficData dbTrafficData) {
        synchronized (this) {
            this.dbTrafficData = dbTrafficData;
            IdTrafficData = dbTrafficData == null ? null : dbTrafficData.getId();
            dbTrafficData__resolvedKey = IdTrafficData;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
