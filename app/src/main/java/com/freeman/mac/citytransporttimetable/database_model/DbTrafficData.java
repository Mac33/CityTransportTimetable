package com.freeman.mac.citytransporttimetable.database_model;

import java.util.List;
import com.freeman.mac.citytransporttimetable.database_model.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "DB_TRAFFIC_DATA".
 */
public class DbTrafficData {

    private Long id;
    private String DirectionOneName;
    private String DirectionTwoName;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient DbTrafficDataDao myDao;

    private List<DbVehicleDescriptionItem> dbVehicleDescriptionItemList;
    private List<DbStreet> dbStreetList;

    public DbTrafficData() {
    }

    public DbTrafficData(Long id) {
        this.id = id;
    }

    public DbTrafficData(Long id, String DirectionOneName, String DirectionTwoName) {
        this.id = id;
        this.DirectionOneName = DirectionOneName;
        this.DirectionTwoName = DirectionTwoName;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getDbTrafficDataDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getDirectionOneName() {
        return DirectionOneName;
    }

    public void setDirectionOneName(String DirectionOneName) {
        this.DirectionOneName = DirectionOneName;
    }

    public String getDirectionTwoName() {
        return DirectionTwoName;
    }

    public void setDirectionTwoName(String DirectionTwoName) {
        this.DirectionTwoName = DirectionTwoName;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<DbVehicleDescriptionItem> getDbVehicleDescriptionItemList() {
        if (dbVehicleDescriptionItemList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DbVehicleDescriptionItemDao targetDao = daoSession.getDbVehicleDescriptionItemDao();
            List<DbVehicleDescriptionItem> dbVehicleDescriptionItemListNew = targetDao._queryDbTrafficData_DbVehicleDescriptionItemList(id);
            synchronized (this) {
                if(dbVehicleDescriptionItemList == null) {
                    dbVehicleDescriptionItemList = dbVehicleDescriptionItemListNew;
                }
            }
        }
        return dbVehicleDescriptionItemList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetDbVehicleDescriptionItemList() {
        dbVehicleDescriptionItemList = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<DbStreet> getDbStreetList() {
        if (dbStreetList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DbStreetDao targetDao = daoSession.getDbStreetDao();
            List<DbStreet> dbStreetListNew = targetDao._queryDbTrafficData_DbStreetList(id);
            synchronized (this) {
                if(dbStreetList == null) {
                    dbStreetList = dbStreetListNew;
                }
            }
        }
        return dbStreetList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetDbStreetList() {
        dbStreetList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
