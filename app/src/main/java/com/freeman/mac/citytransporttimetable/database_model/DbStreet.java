package com.freeman.mac.citytransporttimetable.database_model;

import java.util.List;
import com.freeman.mac.citytransporttimetable.database_model.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "DB_STREET".
 */
public class DbStreet {

    private Long id;
    private Integer DirectionType;
    private String Name;
    private Boolean RequestStop;
    private String CircleDirectionName;
    private Long IdTrafficData;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient DbStreetDao myDao;

    private DbTrafficData dbTrafficData;
    private Long dbTrafficData__resolvedKey;

    private List<DbNextStreetInfo> dbNextStreetInfoList;
    private List<DbTimePeriod> dbTimePeriodList;

    public DbStreet() {
    }

    public DbStreet(Long id) {
        this.id = id;
    }

    public DbStreet(Long id, Integer DirectionType, String Name, Boolean RequestStop, String CircleDirectionName, Long IdTrafficData) {
        this.id = id;
        this.DirectionType = DirectionType;
        this.Name = Name;
        this.RequestStop = RequestStop;
        this.CircleDirectionName = CircleDirectionName;
        this.IdTrafficData = IdTrafficData;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getDbStreetDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Integer getDirectionType() {
        return DirectionType;
    }

    public void setDirectionType(Integer DirectionType) {
        this.DirectionType = DirectionType;
    }

    public String getName() {
        return Name;
    }

    public void setName(String Name) {
        this.Name = Name;
    }

    public Boolean getRequestStop() {
        return RequestStop;
    }

    public void setRequestStop(Boolean RequestStop) {
        this.RequestStop = RequestStop;
    }

    public String getCircleDirectionName() {
        return CircleDirectionName;
    }

    public void setCircleDirectionName(String CircleDirectionName) {
        this.CircleDirectionName = CircleDirectionName;
    }

    public Long getIdTrafficData() {
        return IdTrafficData;
    }

    public void setIdTrafficData(Long IdTrafficData) {
        this.IdTrafficData = IdTrafficData;
    }

    /** To-one relationship, resolved on first access. */
    public DbTrafficData getDbTrafficData() {
        Long __key = this.IdTrafficData;
        if (dbTrafficData__resolvedKey == null || !dbTrafficData__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DbTrafficDataDao targetDao = daoSession.getDbTrafficDataDao();
            DbTrafficData dbTrafficDataNew = targetDao.load(__key);
            synchronized (this) {
                dbTrafficData = dbTrafficDataNew;
            	dbTrafficData__resolvedKey = __key;
            }
        }
        return dbTrafficData;
    }

    public void setDbTrafficData(DbTrafficData dbTrafficData) {
        synchronized (this) {
            this.dbTrafficData = dbTrafficData;
            IdTrafficData = dbTrafficData == null ? null : dbTrafficData.getId();
            dbTrafficData__resolvedKey = IdTrafficData;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<DbNextStreetInfo> getDbNextStreetInfoList() {
        if (dbNextStreetInfoList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DbNextStreetInfoDao targetDao = daoSession.getDbNextStreetInfoDao();
            List<DbNextStreetInfo> dbNextStreetInfoListNew = targetDao._queryDbStreet_DbNextStreetInfoList(id);
            synchronized (this) {
                if(dbNextStreetInfoList == null) {
                    dbNextStreetInfoList = dbNextStreetInfoListNew;
                }
            }
        }
        return dbNextStreetInfoList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetDbNextStreetInfoList() {
        dbNextStreetInfoList = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<DbTimePeriod> getDbTimePeriodList() {
        if (dbTimePeriodList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DbTimePeriodDao targetDao = daoSession.getDbTimePeriodDao();
            List<DbTimePeriod> dbTimePeriodListNew = targetDao._queryDbStreet_DbTimePeriodList(id);
            synchronized (this) {
                if(dbTimePeriodList == null) {
                    dbTimePeriodList = dbTimePeriodListNew;
                }
            }
        }
        return dbTimePeriodList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetDbTimePeriodList() {
        dbTimePeriodList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
