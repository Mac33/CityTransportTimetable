package com.freeman.mac.citytransporttimetable.database_model;

import java.util.List;
import com.freeman.mac.citytransporttimetable.database_model.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "DB_MINUTE_MAPPING".
 */
public class DbMinuteMapping {

    private Long id;
    private Integer VehicleNumber;
    private Integer TimePeriodType;
    private Integer Hour;
    private Integer Minute;
    private String DirectionName;
    private String StreetName;
    private Long IdHourMapping;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient DbMinuteMappingDao myDao;

    private DbHourMapping dbHourMapping;
    private Long dbHourMapping__resolvedKey;

    private List<DbSign> dbSignList;

    public DbMinuteMapping() {
    }

    public DbMinuteMapping(Long id) {
        this.id = id;
    }

    public DbMinuteMapping(Long id, Integer VehicleNumber, Integer TimePeriodType, Integer Hour, Integer Minute, String DirectionName, String StreetName, Long IdHourMapping) {
        this.id = id;
        this.VehicleNumber = VehicleNumber;
        this.TimePeriodType = TimePeriodType;
        this.Hour = Hour;
        this.Minute = Minute;
        this.DirectionName = DirectionName;
        this.StreetName = StreetName;
        this.IdHourMapping = IdHourMapping;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getDbMinuteMappingDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Integer getVehicleNumber() {
        return VehicleNumber;
    }

    public void setVehicleNumber(Integer VehicleNumber) {
        this.VehicleNumber = VehicleNumber;
    }

    public Integer getTimePeriodType() {
        return TimePeriodType;
    }

    public void setTimePeriodType(Integer TimePeriodType) {
        this.TimePeriodType = TimePeriodType;
    }

    public Integer getHour() {
        return Hour;
    }

    public void setHour(Integer Hour) {
        this.Hour = Hour;
    }

    public Integer getMinute() {
        return Minute;
    }

    public void setMinute(Integer Minute) {
        this.Minute = Minute;
    }

    public String getDirectionName() {
        return DirectionName;
    }

    public void setDirectionName(String DirectionName) {
        this.DirectionName = DirectionName;
    }

    public String getStreetName() {
        return StreetName;
    }

    public void setStreetName(String StreetName) {
        this.StreetName = StreetName;
    }

    public Long getIdHourMapping() {
        return IdHourMapping;
    }

    public void setIdHourMapping(Long IdHourMapping) {
        this.IdHourMapping = IdHourMapping;
    }

    /** To-one relationship, resolved on first access. */
    public DbHourMapping getDbHourMapping() {
        Long __key = this.IdHourMapping;
        if (dbHourMapping__resolvedKey == null || !dbHourMapping__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DbHourMappingDao targetDao = daoSession.getDbHourMappingDao();
            DbHourMapping dbHourMappingNew = targetDao.load(__key);
            synchronized (this) {
                dbHourMapping = dbHourMappingNew;
            	dbHourMapping__resolvedKey = __key;
            }
        }
        return dbHourMapping;
    }

    public void setDbHourMapping(DbHourMapping dbHourMapping) {
        synchronized (this) {
            this.dbHourMapping = dbHourMapping;
            IdHourMapping = dbHourMapping == null ? null : dbHourMapping.getId();
            dbHourMapping__resolvedKey = IdHourMapping;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<DbSign> getDbSignList() {
        if (dbSignList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DbSignDao targetDao = daoSession.getDbSignDao();
            List<DbSign> dbSignListNew = targetDao._queryDbMinuteMapping_DbSignList(id);
            synchronized (this) {
                if(dbSignList == null) {
                    dbSignList = dbSignListNew;
                }
            }
        }
        return dbSignList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetDbSignList() {
        dbSignList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
