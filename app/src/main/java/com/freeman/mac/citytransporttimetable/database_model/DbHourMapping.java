package com.freeman.mac.citytransporttimetable.database_model;

import java.util.List;
import com.freeman.mac.citytransporttimetable.database_model.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "DB_HOUR_MAPPING".
 */
public class DbHourMapping {

    private Long id;
    private Integer Hour;
    private Long IdTimePeriod;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient DbHourMappingDao myDao;

    private DbTimePeriod dbTimePeriod;
    private Long dbTimePeriod__resolvedKey;

    private List<DbMinuteMapping> dbMinuteMappingList;

    public DbHourMapping() {
    }

    public DbHourMapping(Long id) {
        this.id = id;
    }

    public DbHourMapping(Long id, Integer Hour, Long IdTimePeriod) {
        this.id = id;
        this.Hour = Hour;
        this.IdTimePeriod = IdTimePeriod;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getDbHourMappingDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Integer getHour() {
        return Hour;
    }

    public void setHour(Integer Hour) {
        this.Hour = Hour;
    }

    public Long getIdTimePeriod() {
        return IdTimePeriod;
    }

    public void setIdTimePeriod(Long IdTimePeriod) {
        this.IdTimePeriod = IdTimePeriod;
    }

    /** To-one relationship, resolved on first access. */
    public DbTimePeriod getDbTimePeriod() {
        Long __key = this.IdTimePeriod;
        if (dbTimePeriod__resolvedKey == null || !dbTimePeriod__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DbTimePeriodDao targetDao = daoSession.getDbTimePeriodDao();
            DbTimePeriod dbTimePeriodNew = targetDao.load(__key);
            synchronized (this) {
                dbTimePeriod = dbTimePeriodNew;
            	dbTimePeriod__resolvedKey = __key;
            }
        }
        return dbTimePeriod;
    }

    public void setDbTimePeriod(DbTimePeriod dbTimePeriod) {
        synchronized (this) {
            this.dbTimePeriod = dbTimePeriod;
            IdTimePeriod = dbTimePeriod == null ? null : dbTimePeriod.getId();
            dbTimePeriod__resolvedKey = IdTimePeriod;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<DbMinuteMapping> getDbMinuteMappingList() {
        if (dbMinuteMappingList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DbMinuteMappingDao targetDao = daoSession.getDbMinuteMappingDao();
            List<DbMinuteMapping> dbMinuteMappingListNew = targetDao._queryDbHourMapping_DbMinuteMappingList(id);
            synchronized (this) {
                if(dbMinuteMappingList == null) {
                    dbMinuteMappingList = dbMinuteMappingListNew;
                }
            }
        }
        return dbMinuteMappingList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetDbMinuteMappingList() {
        dbMinuteMappingList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
