package com.freeman.mac.citytransporttimetable.database_model;

import com.freeman.mac.citytransporttimetable.database_model.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "DB_NEXT_STREET_INFO".
 */
public class DbNextStreetInfo {

    private Long id;
    private String Name;
    private Integer Duration;
    private Long IdStreet;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient DbNextStreetInfoDao myDao;

    private DbStreet dbStreet;
    private Long dbStreet__resolvedKey;


    public DbNextStreetInfo() {
    }

    public DbNextStreetInfo(Long id) {
        this.id = id;
    }

    public DbNextStreetInfo(Long id, String Name, Integer Duration, Long IdStreet) {
        this.id = id;
        this.Name = Name;
        this.Duration = Duration;
        this.IdStreet = IdStreet;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getDbNextStreetInfoDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return Name;
    }

    public void setName(String Name) {
        this.Name = Name;
    }

    public Integer getDuration() {
        return Duration;
    }

    public void setDuration(Integer Duration) {
        this.Duration = Duration;
    }

    public Long getIdStreet() {
        return IdStreet;
    }

    public void setIdStreet(Long IdStreet) {
        this.IdStreet = IdStreet;
    }

    /** To-one relationship, resolved on first access. */
    public DbStreet getDbStreet() {
        Long __key = this.IdStreet;
        if (dbStreet__resolvedKey == null || !dbStreet__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DbStreetDao targetDao = daoSession.getDbStreetDao();
            DbStreet dbStreetNew = targetDao.load(__key);
            synchronized (this) {
                dbStreet = dbStreetNew;
            	dbStreet__resolvedKey = __key;
            }
        }
        return dbStreet;
    }

    public void setDbStreet(DbStreet dbStreet) {
        synchronized (this) {
            this.dbStreet = dbStreet;
            IdStreet = dbStreet == null ? null : dbStreet.getId();
            dbStreet__resolvedKey = IdStreet;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
