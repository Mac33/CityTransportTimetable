package com.freeman.mac.citytransporttimetable.database_model;

import com.freeman.mac.citytransporttimetable.database_model.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "DB_SIGN".
 */
public class DbSign {

    private Long id;
    private String Value;
    private Long IdMinuteMapping;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient DbSignDao myDao;

    private DbMinuteMapping dbMinuteMapping;
    private Long dbMinuteMapping__resolvedKey;


    public DbSign() {
    }

    public DbSign(Long id) {
        this.id = id;
    }

    public DbSign(Long id, String Value, Long IdMinuteMapping) {
        this.id = id;
        this.Value = Value;
        this.IdMinuteMapping = IdMinuteMapping;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getDbSignDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getValue() {
        return Value;
    }

    public void setValue(String Value) {
        this.Value = Value;
    }

    public Long getIdMinuteMapping() {
        return IdMinuteMapping;
    }

    public void setIdMinuteMapping(Long IdMinuteMapping) {
        this.IdMinuteMapping = IdMinuteMapping;
    }

    /** To-one relationship, resolved on first access. */
    public DbMinuteMapping getDbMinuteMapping() {
        Long __key = this.IdMinuteMapping;
        if (dbMinuteMapping__resolvedKey == null || !dbMinuteMapping__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DbMinuteMappingDao targetDao = daoSession.getDbMinuteMappingDao();
            DbMinuteMapping dbMinuteMappingNew = targetDao.load(__key);
            synchronized (this) {
                dbMinuteMapping = dbMinuteMappingNew;
            	dbMinuteMapping__resolvedKey = __key;
            }
        }
        return dbMinuteMapping;
    }

    public void setDbMinuteMapping(DbMinuteMapping dbMinuteMapping) {
        synchronized (this) {
            this.dbMinuteMapping = dbMinuteMapping;
            IdMinuteMapping = dbMinuteMapping == null ? null : dbMinuteMapping.getId();
            dbMinuteMapping__resolvedKey = IdMinuteMapping;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
