package com.freeman.mac.citytransporttimetable.database_model;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.freeman.mac.citytransporttimetable.database_model.DbMinuteMapping;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DB_MINUTE_MAPPING".
*/
public class DbMinuteMappingDao extends AbstractDao<DbMinuteMapping, Long> {

    public static final String TABLENAME = "DB_MINUTE_MAPPING";

    /**
     * Properties of entity DbMinuteMapping.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property VehicleNumber = new Property(1, Integer.class, "VehicleNumber", false, "VEHICLE_NUMBER");
        public final static Property TimePeriodType = new Property(2, Integer.class, "TimePeriodType", false, "TIME_PERIOD_TYPE");
        public final static Property Hour = new Property(3, Integer.class, "Hour", false, "HOUR");
        public final static Property Minute = new Property(4, Integer.class, "Minute", false, "MINUTE");
        public final static Property DirectionName = new Property(5, String.class, "DirectionName", false, "DIRECTION_NAME");
        public final static Property StreetName = new Property(6, String.class, "StreetName", false, "STREET_NAME");
        public final static Property IdHourMapping = new Property(7, Long.class, "IdHourMapping", false, "ID_HOUR_MAPPING");
    };

    private DaoSession daoSession;

    private Query<DbMinuteMapping> dbHourMapping_DbMinuteMappingListQuery;

    public DbMinuteMappingDao(DaoConfig config) {
        super(config);
    }
    
    public DbMinuteMappingDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DB_MINUTE_MAPPING\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"VEHICLE_NUMBER\" INTEGER," + // 1: VehicleNumber
                "\"TIME_PERIOD_TYPE\" INTEGER," + // 2: TimePeriodType
                "\"HOUR\" INTEGER," + // 3: Hour
                "\"MINUTE\" INTEGER," + // 4: Minute
                "\"DIRECTION_NAME\" TEXT," + // 5: DirectionName
                "\"STREET_NAME\" TEXT," + // 6: StreetName
                "\"ID_HOUR_MAPPING\" INTEGER);"); // 7: IdHourMapping
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_DB_MINUTE_MAPPING_ID_HOUR_MAPPING ON DB_MINUTE_MAPPING" +
                " (\"ID_HOUR_MAPPING\");");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DB_MINUTE_MAPPING\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DbMinuteMapping entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer VehicleNumber = entity.getVehicleNumber();
        if (VehicleNumber != null) {
            stmt.bindLong(2, VehicleNumber);
        }
 
        Integer TimePeriodType = entity.getTimePeriodType();
        if (TimePeriodType != null) {
            stmt.bindLong(3, TimePeriodType);
        }
 
        Integer Hour = entity.getHour();
        if (Hour != null) {
            stmt.bindLong(4, Hour);
        }
 
        Integer Minute = entity.getMinute();
        if (Minute != null) {
            stmt.bindLong(5, Minute);
        }
 
        String DirectionName = entity.getDirectionName();
        if (DirectionName != null) {
            stmt.bindString(6, DirectionName);
        }
 
        String StreetName = entity.getStreetName();
        if (StreetName != null) {
            stmt.bindString(7, StreetName);
        }
 
        Long IdHourMapping = entity.getIdHourMapping();
        if (IdHourMapping != null) {
            stmt.bindLong(8, IdHourMapping);
        }
    }

    @Override
    protected void attachEntity(DbMinuteMapping entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public DbMinuteMapping readEntity(Cursor cursor, int offset) {
        DbMinuteMapping entity = new DbMinuteMapping( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // VehicleNumber
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // TimePeriodType
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // Hour
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // Minute
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // DirectionName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // StreetName
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7) // IdHourMapping
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DbMinuteMapping entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setVehicleNumber(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setTimePeriodType(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setHour(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setMinute(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setDirectionName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setStreetName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setIdHourMapping(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(DbMinuteMapping entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(DbMinuteMapping entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "dbMinuteMappingList" to-many relationship of DbHourMapping. */
    public List<DbMinuteMapping> _queryDbHourMapping_DbMinuteMappingList(Long IdHourMapping) {
        synchronized (this) {
            if (dbHourMapping_DbMinuteMappingListQuery == null) {
                QueryBuilder<DbMinuteMapping> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.IdHourMapping.eq(null));
                dbHourMapping_DbMinuteMappingListQuery = queryBuilder.build();
            }
        }
        Query<DbMinuteMapping> query = dbHourMapping_DbMinuteMappingListQuery.forCurrentThread();
        query.setParameter(0, IdHourMapping);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getDbHourMappingDao().getAllColumns());
            builder.append(" FROM DB_MINUTE_MAPPING T");
            builder.append(" LEFT JOIN DB_HOUR_MAPPING T0 ON T.\"ID_HOUR_MAPPING\"=T0.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected DbMinuteMapping loadCurrentDeep(Cursor cursor, boolean lock) {
        DbMinuteMapping entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        DbHourMapping dbHourMapping = loadCurrentOther(daoSession.getDbHourMappingDao(), cursor, offset);
        entity.setDbHourMapping(dbHourMapping);

        return entity;    
    }

    public DbMinuteMapping loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<DbMinuteMapping> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<DbMinuteMapping> list = new ArrayList<DbMinuteMapping>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<DbMinuteMapping> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<DbMinuteMapping> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
