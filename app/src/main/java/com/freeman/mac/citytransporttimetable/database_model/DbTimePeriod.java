package com.freeman.mac.citytransporttimetable.database_model;

import java.util.List;
import com.freeman.mac.citytransporttimetable.database_model.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "DB_TIME_PERIOD".
 */
public class DbTimePeriod {

    private Long id;
    private Integer Type;
    private String Name;
    private Long IdStreet;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient DbTimePeriodDao myDao;

    private DbStreet dbStreet;
    private Long dbStreet__resolvedKey;

    private List<DbHourMapping> dbHourMappingList;

    public DbTimePeriod() {
    }

    public DbTimePeriod(Long id) {
        this.id = id;
    }

    public DbTimePeriod(Long id, Integer Type, String Name, Long IdStreet) {
        this.id = id;
        this.Type = Type;
        this.Name = Name;
        this.IdStreet = IdStreet;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getDbTimePeriodDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Integer getType() {
        return Type;
    }

    public void setType(Integer Type) {
        this.Type = Type;
    }

    public String getName() {
        return Name;
    }

    public void setName(String Name) {
        this.Name = Name;
    }

    public Long getIdStreet() {
        return IdStreet;
    }

    public void setIdStreet(Long IdStreet) {
        this.IdStreet = IdStreet;
    }

    /** To-one relationship, resolved on first access. */
    public DbStreet getDbStreet() {
        Long __key = this.IdStreet;
        if (dbStreet__resolvedKey == null || !dbStreet__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DbStreetDao targetDao = daoSession.getDbStreetDao();
            DbStreet dbStreetNew = targetDao.load(__key);
            synchronized (this) {
                dbStreet = dbStreetNew;
            	dbStreet__resolvedKey = __key;
            }
        }
        return dbStreet;
    }

    public void setDbStreet(DbStreet dbStreet) {
        synchronized (this) {
            this.dbStreet = dbStreet;
            IdStreet = dbStreet == null ? null : dbStreet.getId();
            dbStreet__resolvedKey = IdStreet;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<DbHourMapping> getDbHourMappingList() {
        if (dbHourMappingList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DbHourMappingDao targetDao = daoSession.getDbHourMappingDao();
            List<DbHourMapping> dbHourMappingListNew = targetDao._queryDbTimePeriod_DbHourMappingList(id);
            synchronized (this) {
                if(dbHourMappingList == null) {
                    dbHourMappingList = dbHourMappingListNew;
                }
            }
        }
        return dbHourMappingList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetDbHourMappingList() {
        dbHourMappingList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
